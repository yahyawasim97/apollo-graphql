{"version":3,"sources":["components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["launch","flight_number","mission_name","launch_date_local","launch_success","className","classNames","format","to","MissionKey","LAUCHES_QUERY","gql","Launches","query","loading","error","data","toString","launches","map","LaunchItem","key","Component","LAUNCH_QUERY","Launch","this","props","match","params","parseInt","variables","console","log","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0612f3d7.chunk.js","sourcesContent":["import React from 'react'\nimport classNames from 'classnames';\nimport Moment from 'react-moment';\nimport {Link} from 'react-router-dom';\nexport default function ({launch:{flight_number,mission_name,launch_date_local,launch_success}}) {\n    return (\n        <div className=\"card card-body mb-3\">\n            <div className=\"row\">\n                <div className=\"col-md-9\">\n                    <h4>Mission: <span className={classNames({\n                        'text-success':launch_success,\n                        'text-danger': !launch_success\n                    })}>{mission_name}</span></h4>\n                    <p>Date: <Moment format=\"YYYY-MM-DD HH:mm:ss\">{launch_date_local}</Moment></p>\n                </div>\n                <div className=\"col-md-3\">\n                    <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">Launch Details</Link>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function MissionKey() {\n    return (\n        <div className=\"my-3\">\n            <p><span className=\"px-3 mr-2 bg-success\"/> = Success</p>\n            <p><span className=\"px-3 mr-2 bg-danger\"/> = Failure</p> \n        </div>\n    )\n}\n","import React, { Component,Fragment } from 'react'\nimport { gql } from \"apollo-boost\";\nimport {Query} from 'react-apollo';\nimport LaunchItem from './LaunchItem';\nimport MissionKey from './MissionKey';\nconst LAUCHES_QUERY = gql`\n    query  LaunchesQuery {\n        launches {\n            flight_number\n            mission_name\n            launch_date_local\n            launch_success\n        }\n    }\n`;\n\nexport class Launches extends Component {\n    render() {\n        return (\n            <div>\n                <h1 className=\"display-4 my-3\">Launches</h1>\n                <MissionKey/>\n                <Query query={LAUCHES_QUERY}>\n                    {\n                        ({ loading, error, data})=> {\n                            if(loading) return <h4>Loading...</h4>\n                            if(error) return <h4>Error: {error.toString()}</h4>\n\n                            return <Fragment>\n                            {\n                                data.launches.map((launch)=><LaunchItem key={launch.flight_number} launch={launch}/>)\n                            }\n                            </Fragment>\n                        }\n                    }\n                </Query>\n            </div>\n        )\n    }\n}\n\nexport default Launches\n","import React, { Component } from 'react'\nimport { gql } from \"apollo-boost\";\nimport {Query} from 'react-apollo';\nimport {Link } from 'react-router-dom';\nimport classNames from 'classnames';\nconst LAUNCH_QUERY = gql`\n    query LaunchQuery($flight_number: Int!) {\n        launch(flight_number: $flight_number) {\n            flight_number\n            mission_name\n            launch_year\n            launch_year\n            launch_success\n            rocket {\n                rocket_id\n                rocket_name\n                rocket_type\n            }\n        }\n    }\n`;\nexport class Launch extends Component {\n    render() {\n        let {flight_number} = this.props.match.params;\n        flight_number = parseInt(flight_number);\n        return (\n            <div>\n                <Query query={LAUNCH_QUERY} variables={{flight_number}}>\n                    {\n                        ({ loading, error, data})=> {\n                            if(loading) return <h4>Loading...</h4>\n                            if(error) console.log(error)\n                            const { mission_name,flight_number,launch_year,launch_success,\n                                rocket:  {\n                                    rocket_id,\n                                    rocket_name,\n                                    rocket_type,\n                                }} = data.launch;\n                            return(\n                                <div>\n                                    <h1 className=\"display-4 my-3\">\n                                        <span className=\"text-dark\">Mission:</span> {mission_name}\n                                    </h1>\n                                    <h4 className=\"mb-3\">Launch Details</h4>\n                                    <ul className=\"list-group\">\n                                        <li className=\"list-group-item\">Flight Number: {flight_number}</li>\n                                        <li className=\"list-group-item\">Launch Year: {launch_year}</li>\n                                        <li className=\"list-group-item\">Launch Successful: <span className={classNames({\n                                            'text-success':launch_success,\n                                            'text-danger':!launch_success\n                                        })}>{launch_success?'Yes':'No'}</span></li>\n                                    </ul>\n                                    <h4 className=\"my-3\">Rocket Details</h4>\n                                    <ul className=\"list-group\">\n                                        <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\n                                        <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\n                                        <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\n                                    </ul>  \n                                    <h4/>\n                                    <Link to=\"/\" className=\"btn btn-secondary\">Back</Link> \n                                </div>\n                            )\n                        }\n                    }\n                </Query>\n            </div>\n        )\n    }\n}\n\nexport default Launch\n","import React from 'react';\nimport './App.css';\nimport ApolloClient from 'apollo-boost';\nimport {ApolloProvider} from 'react-apollo';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\nconst client = new ApolloClient({\n  uri: '/graphql'\n})\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          <Route exact path=\"/\" component={Launches}/>\n          <Route exact path=\"/launch/:flight_number\" component={Launch}/>\n        </div>\n      </Router>\n    </ApolloProvider>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}